package com.piooda.recycrew.feature.community.ui

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.viewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.piooda.UiState
import com.piooda.data.model.Content
import com.piooda.recycrew.core.BaseFragment
import com.piooda.recycrew.core.ViewModelFactory
import com.piooda.recycrew.databinding.FragmentQuestionBinding
import com.piooda.recycrew.feature.community.adapter.QuestionRecyclerAdapter
import com.piooda.recycrew.feature.community.viewmodel.QuestionViewModel
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

class QuestionFragment : BaseFragment<FragmentQuestionBinding>(FragmentQuestionBinding::inflate) {

    private lateinit var recyclerAdapter: QuestionRecyclerAdapter
    private val viewModel by viewModels<QuestionViewModel> {
        ViewModelFactory(requireContext())
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupRecyclerView()
        observeViewModel()
        setupFloatingButton()
    }

    private fun setupRecyclerView() {
        recyclerAdapter = QuestionRecyclerAdapter(
            onClick = { item -> navigateToDetailFragment(item) },
            onLikeClick = { item -> viewModel.toggleLike(item) }
        )

        binding.recyclerView.apply {
            adapter = recyclerAdapter
            layoutManager = LinearLayoutManager(requireContext())
        }
    }

    private fun setupFloatingButton() {
        binding.floatingButton.setOnClickListener {
            val intent = Intent(requireActivity(), InputActivity::class.java)
            startActivity(intent)
        }
    }

    private fun observeViewModel() {
        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.lifecycle.repeatOnLifecycle(Lifecycle.State.STARTED) {

                // Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Îäî Flow
                launch {
                    viewModel.contentList.collect { contentList ->
                        Log.d("Fragment", "üî• Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å: ${contentList.size}Í∞ú")

                        if (contentList.isEmpty()) {
                            viewModel.setUiState(UiState.Empty) // üî• Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Empty ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
                        } else {
                            recyclerAdapter.submitList(contentList.toMutableList()) {
                                Log.d("RecyclerView", "üî• RecyclerView ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å | Îç∞Ïù¥ÌÑ∞ Í∞úÏàò: ${contentList.size}")
                                binding.progressBar.isVisible = false // Ïó¨Í∏∞ÏÑú ProgressBar Ïà®ÍπÄ Ï≤òÎ¶¨
                                binding.recyclerView.isVisible = true
                            }
                        }
                    }
                }

                // UI ÏÉÅÌÉú Ï≤òÎ¶¨ Flow
                launch {
                    viewModel.state.collectLatest { state ->
                        when (state) {
                            is UiState.Loading -> {
                                binding.progressBar.isVisible = true // Ï¶âÏãú ÌëúÏãú
                                binding.progressBar.animate().alpha(1f).setDuration(500).start()
                                Log.d("UI State", "Loading ÏÉÅÌÉú Í∞êÏßÄ üöÄ")
                            }

                            is UiState.Success -> {
                                Log.d("UI State", "Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å ‚úÖ")
                                if (state.resultData.isEmpty()) {
                                    viewModel.setUiState(UiState.Empty) // üî• ÏÑ±Í≥µÌñàÏßÄÎßå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Empty ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
                                } else {
                                    recyclerAdapter.submitList(state.resultData.toMutableList()) {
                                        binding.progressBar.animate().alpha(0f).setDuration(300)
                                            .withEndAction { binding.progressBar.isVisible = false }
                                            .start()
                                    }
                                }
                            }

                            is UiState.Empty -> {
                                Log.d("UI State", "Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
                                recyclerAdapter.submitList(emptyList()) { // üî• Empty ÏÉÅÌÉúÏóêÏÑú RecyclerView Ï¥àÍ∏∞Ìôî
                                    binding.progressBar.animate().alpha(0f).setDuration(300)
                                        .withEndAction { binding.progressBar.isVisible = false }
                                        .start()
                                    binding.recyclerView.isVisible = false
                                }
                            }

                            is UiState.Error -> {
                                Log.e("UI State", "Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå® ‚ùå", state.exception)
                                binding.progressBar.animate().alpha(0f).setDuration(300)
                                    .withEndAction { binding.progressBar.isVisible = false }
                                    .start()
                                Toast.makeText(
                                    requireContext(),
                                    "Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: ${state.exception.message}",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        }
                    }
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        Log.d("onResume", "üî• onResume Ïã§ÌñâÎê®")
    }

    private fun navigateToDetailFragment(item: Content) {
        val action = QuestionFragmentDirections.actionQuestionFragmentToQuestionDetailFragment(item)
        findNavController().navigate(action)
    }

    override fun onDestroyView() {
        binding.recyclerView.adapter = null
        _binding = null
        super.onDestroyView()
    }
}