package com.piooda.recycrew.feature.community.ui

import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
//noinspection UsingMaterialAndMaterial3Libraries
import androidx.compose.material.Divider
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import coil.compose.rememberAsyncImagePainter
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.piooda.UiState
import com.piooda.data.model.Content
import com.piooda.recycrew.core.BaseFragment
import com.piooda.recycrew.core.ViewModelFactory
import com.piooda.recycrew.databinding.FragmentQuestionDetailBinding
import com.piooda.recycrew.feature.community.adapter.QuestionCommentRecyclerAdapter
import com.piooda.recycrew.feature.community.viewmodel.QuestionDetailsViewModel
import kotlinx.coroutines.launch

class QuestionDetailFragment :
    BaseFragment<FragmentQuestionDetailBinding>(FragmentQuestionDetailBinding::inflate) {

    private val viewModel by viewModels<QuestionDetailsViewModel> { ViewModelFactory(requireContext()) }
    private lateinit var commentAdapter: QuestionCommentRecyclerAdapter
    private val args: QuestionDetailFragmentArgs by navArgs()
    private val content: Content by lazy { args.detailedQuestPostData }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        content.id?.let { viewModel.loadComments(it) }
        content.id?.let { viewModel.loadContentDetail(it) }

        // ÎåìÍ∏Ä RecyclerView ÏÑ§Ï†ï
        commentAdapter = QuestionCommentRecyclerAdapter()
        binding.rvQuestionDetail.adapter = commentAdapter

        // üî• Í≤åÏãúÎ¨º ÏÉÅÏÑ∏ Î∂ÄÎ∂ÑÎßå Compose Ï†ÅÏö©
        // üî• ComposeViewÎ•º ÌôúÏö©ÌïòÏó¨ Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ ÌôîÎ©¥Îßå ComposeÎ°ú Ï†ÑÌôò
        binding.composeContainer.setContent {
            QuestionDetailContent(
                content = content,
                onBackClick = { findNavController().popBackStack() }, // üî• Îí§Î°ú Í∞ÄÍ∏∞ Ï∂îÍ∞Ä
                onEditClick = { /* ÏàòÏ†ï Í∏∞Îä• Ï∂îÍ∞Ä */ },
                onDeleteClick = { content.id?.let { viewModel.deletePost(it) } }
            )
        }

        binding.commentFiled.setEndIconOnClickListener {
            val commentText = binding.commentFiled.editText?.text.toString().trim()
            if (commentText.isNotEmpty()) {
                val currentUser = FirebaseAuth.getInstance().currentUser
                val userName = currentUser?.displayName ?: "Anonymous"
                val newComment = Content.Comment(
                    author = userName, // Ïú†Ï†Ä Ïù¥Î¶Ñ
                    content = commentText, // ÎåìÍ∏Ä ÎÇ¥Ïö©
                    timestamp = Timestamp.now() // ÎåìÍ∏Ä ÏãúÍ∞Ñ
                )
                content.id?.let { it1 -> viewModel.addCommentToPost(it1, newComment) }
                binding.commentFiled.editText?.text?.clear()
            } else {
                Log.d("QuestionDetailFragment - addCommentToPost ", "ÎåìÍ∏ÄÏù¥ ÎπÑÏõåÏ†∏ ÏûàÏäµÎãàÎã§.")
            }
        }

        //  ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Í¥ÄÏ∞∞ (StateFlow ‚Üí collect ÏÇ¨Ïö©)
        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.commentList.collect { comments ->
                commentAdapter.submitList(comments)
            }
        }

        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.uiState.collect { state ->
                if (state is UiState.Success) {
                    findNavController().popBackStack()
                }
            }
        }
    }

    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    fun QuestionDetailContent(
        content: Content,
        onBackClick: () -> Unit,
        onEditClick: () -> Unit,
        onDeleteClick: () -> Unit,
    ) {
        var expanded by remember { mutableStateOf(false) } // üçî Î©îÎâ¥ ÏÉÅÌÉú

        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text("Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏") },
                    navigationIcon = {
                        IconButton(onClick = onBackClick) { // üîô Îí§Î°ú Í∞ÄÍ∏∞ Î≤ÑÌäº
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞"
                            )
                        }
                    },
                    actions = {
                        IconButton(onClick = { expanded = true }) { // üçî Ï†ê 3Í∞ú Î≤ÑÌäº
                            Icon(imageVector = Icons.Default.MoreVert, contentDescription = "ÎçîÎ≥¥Í∏∞")
                        }
                        DropdownMenu(
                            expanded = expanded,
                            onDismissRequest = { expanded = false }
                        ) {
                            DropdownMenuItem(text = { Text("ÏàòÏ†ïÌïòÍ∏∞") }, onClick = {
                                expanded = false
                                onEditClick()
                            })
                            DropdownMenuItem(text = { Text("ÏÇ≠Ï†úÌïòÍ∏∞") }, onClick = {
                                expanded = false
                                onDeleteClick()
                            })
                        }
                    }
                )
            }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .verticalScroll(rememberScrollState())
            ) {
                // üî• ÎãâÎÑ§ÏûÑ
                Text(
                    text = content.nickname ?: "ÏùµÎ™Ö",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(16.dp)
                )

                // üî• Ïù¥ÎØ∏ÏßÄ ÌëúÏãú (ÏûàÏùÑ Í≤ΩÏö∞Îßå)
                content.imagePath?.let { imageUrl ->
                    if (imageUrl.isNotEmpty()) {
                        Image(
                            painter = rememberAsyncImagePainter(model = imageUrl),
                            contentDescription = "Í≤åÏãúÍ∏Ä Ïù¥ÎØ∏ÏßÄ",
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(250.dp)
                                .padding(8.dp)
                        )
                    }
                }

                // üî• Í≤åÏãúÍ∏Ä ÎÇ¥Ïö©
                Text(
                    text = content.content ?: "ÎÇ¥Ïö© ÏóÜÏùå",
                    style = MaterialTheme.typography.bodyLarge,
                    modifier = Modifier.padding(16.dp)
                )

                Divider()
            }
        }
    }

}
